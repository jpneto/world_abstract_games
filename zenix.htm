<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="Content-Language" content="en-us">
<title>Games of Soldiers - ZENIX</title>
<script LANGUAGE="JavaScript" src="hex2diag/hex2diag.js"></script>
</head>

<body background="ricebk.jpg" bgcolor="#FFFFFF" text="#000000" link="#666633" vlink="#333366" alink="#990000">
<blockquote mstheme>
<h1 align="center"><strong><font face="Arial Black">Zenix&nbsp;</font></strong></h1>
<p align="center"><strong><font size="3">Copyright (c) 2000 JÃ¼rgen Heel</font></strong></p>
    <p><font face="Arial" size="3">Each player has 12 stones. The game is played on the following board. </font></p>
    <center>
    <table border="2" width="250" bgcolor="#D5BD83" bordercolorlight="#333366" bordercolordark="#000000">
      <tr>
        <td width="100%" background="icons/back-board.jpg"><script LANGUAGE="JavaScript"><!--
hexgv2diag("1,8,8,./../.../..../...../....../......./........");
        //--></script></td>
      </tr>
    </table>
    </center>
&nbsp;
    <table border="0" width="80%">
      <tr>
        <td width="100%">
          <ul>
			<li><font face="Arial" size="3"><strong>GOAL</strong> - Wins the player with the longest chain of his own stones.</font></li>
			<li><font face="Arial"><b>MOVE</b> - On each turn, each player can:&nbsp;</font>
                <ul>
					<li><font face="Arial">Remove one empty cell - each player can only do this six times.</font></li>
					<li><font size="3" face="Arial">Drop a stone into an empty cell</font></li>
					<li><font face="Arial"><font size="3">The two cells below the chosen cell (either to remove or drop
                      a stone) must not be empty (i.e., were removed or already have stones)</font>.</font></li>
			</ul>
			</li>
			</ul>
        </td>
      </tr>
    </table>
&nbsp;
  <table border="1" width="600" cellspacing="3" cellpadding="2" bordercolorlight="#333366" bordercolordark="#000000">
    <tr>
      <td align="left" width="250" bordercolor="#000000" bgcolor="#D5BD83" background="icons/back-board.jpg"><script LANGUAGE="JavaScript"><!--
hexgv2diag("1,8,8,h/hw/xwh/wxwx/wxhwh/hxwhhx/xhxwhhx/whxxwwxw");
//--></script>
      </td>
      <td valign="top" width="350"><font face="Arial"><strong>An example</strong></font>
        <p><font face="Arial">In this game, Black has won, since Black's
          longest chain has 7 stones, and White's has only 4 stones.</font></td>
    </tr>
  </table>
    <p><font size="3" face="Arial"><a href="mailto:glu@who.net">David Glaude</a>
    has a 
	<a href="https://web.archive.org/web/20080104030223/http:/glu.freeservers.com/zenix.htm">website</a> with more
    information about Zenix:</font></p>
<blockquote>
	<p align="justify"><i><font face="Arial"><b>Complexity of the game.</b> As 
	for every game I am interested to know if it is easy to play the game for a 
	computer. I also want to check what is or could be the theoretical value of 
	the game. And if the game seems to be a win or not to difficult to prove.<br>
	<br>
	The most interesting problem with Zenix is to determine who is the winner. 
	It might be obvious for a human, but for a computer it is not so easy. Let 
	say that finding the winner is equivalent to finding the longest path in a 
	graph. And finding the longest path in a graph is a complex problem with no 
	good algorithm to find the solution. So a silly algorithm like a recursive 
	search with back-tracking might be the best one we have. Now given the size 
	of the board, it is not too long to compute, but however exponential in 
	time.<br>
	<br>
	Now for a computer to play the game, we might want to have an evaluation 
	function that can evaluate the longest chain possible for each player or the 
	current longest one. Even if the length of the game is rather short (only 36 
	moves) and the number of possible legal move is small too (16 for the first 
	move then dropping to 14 and below)... The cost to find who is winning might 
	be the biggest challenge for proving of evaluating the game.<br>
	<br>
	If finding the longest path for a player is difficult. But we can find an 
	upper bound for the longest path is easy. At the maximum we have 12 because 
	that's the number of pieces available for each. Then the maximum is also the 
	number of adjacent piece (+ all the piece remaining) this mean if a few 
	pieces are isolated from the rest, they don't count as part of the maximum.</font></i></p>
</blockquote>
<p><font face="Arial">There is a <a href="zrfs/zenix.zip">ZRF</a> to play Zenix.</font></p>
</blockquote>
<hr>
</body>
</html>
